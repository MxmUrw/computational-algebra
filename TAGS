
./Algebra/Algorithms/FGLM.hs,576
module Algebra.Algorithms.FGLM (FGLMEnv(..),2,3
data FGLMEnv s15,16
data FGLMEnv s r ord n = FGLMEnv {15,16
data FGLMEnv s r ord n = FGLMEnv { _lMap     ::15,16
                                 , _gLex     ::16,17
                                 , _bLex     ::17,18
                                 , _proced   ::18,19
                                 , _monomial ::19,20
type Machine s24,25
type Machine s r24,25
look ::26,27
look =27,28
(.==) ::29,30
(.==) :: (MonadTrans29,30
v .==30,31
(%==) :: (MonadTrans34,35
infix 439,40
image ::41,42
image a42,43

./Algebra/Algorithms/Groebner/Monomorphic.hs,1679
module Algebra.Algorithms.Groebner.Monomorphic5,6
class (Eq r, Field r, NoetherianRing r) => Groebnerable r54,55
intersection ::58,59
intersection ps60,61
freshVar ::76,77
freshVar ps77,78
saturationByPrincipalIdeal ::83,84
saturationByPrincipalIdeal j85,86
saturationIdeal ::90,91
saturationIdeal i91,92
quotByPrincipalIdeal ::94,95
quotByPrincipalIdeal i95,96
quotIdeal ::99,100
quotIdeal i100,101
divModPolynomial ::102,103
divModPolynomial =104,105
divModPolynomialWith ::106,107
divModPolynomialWith _109,110
divPolynomial ::120,121
divPolynomial =121,122
modPolynomial ::123,124
modPolynomial =124,125
divPolynomialWith ::126,127
divPolynomialWith ord127,128
modPolynomialWith ::129,130
modPolynomialWith ord131,132
calcGroebnerBasis ::133,134
calcGroebnerBasis =134,135
calcGroebnerBasisWith ::136,137
calcGroebnerBasisWith _138,139
simpleBuchberger ::149,150
simpleBuchberger =150,151
simpleBuchbergerWith ::152,153
simpleBuchbergerWith _154,155
primeTestBuchberger ::165,166
primeTestBuchberger =166,167
primeTestBuchbergerWith ::168,169
primeTestBuchbergerWith _170,171
syzygyBuchberger ::181,182
syzygyBuchberger =182,183
syzygyBuchbergerWithStrategy ::184,185
syzygyBuchbergerWithStrategy _188,189
syzygyBuchbergerWith ::200,201
syzygyBuchbergerWith _202,203
isIdealMember ::205,206
isIdealMember f206,207
eliminateWith ::214,215
eliminateWith ord216,217
eliminate ::240,241
eliminate vs241,242
thEliminationIdeal ::244,245
thEliminationIdeal =245,246
thEliminationIdealWith ::247,248
thEliminationIdealWith ord248,249
resultant ::253,254
resultant f255,256
hasCommonFactor ::267,268
hasCommonFactor f268,269

./Algebra/Algorithms/Groebner.hs,2352
module Algebra.Algorithms.Groebner (5,6
divModPolynomial ::49,50
divModPolynomial f052,53
modPolynomial ::66,67
modPolynomial =70,71
divPolynomial ::73,74
divPolynomial =77,78
simpleBuchberger ::84,85
simpleBuchberger ideal86,87
primeTestBuchberger ::96,97
primeTestBuchberger ideal98,99
(.=) ::109,110
(.=) :: STRef109,110
x .=110,111
(%=) :: STRef112,113
padVec ::115,116
padVec _116,117
combinations ::129,130
combinations xs130,131
buchberger ::134,135
buchberger =136,137
syzygyBuchberger ::141,142
syzygyBuchberger =143,144
(=@=) :: Vector145,146
Nil       =@=146,147
_         =@=150,151
instance Eq152,153
syzygyBuchbergerWithStrategy ::161,162
syzygyBuchbergerWithStrategy strategy164,165
calcWeight' ::194,195
calcWeight' s196,197
             => Proxy s202,203
  type Weight s200,201
  calcWeight ::201,202
data NormalStrategy =206,207
data NormalStrategy = NormalStrategy deriving206,207
data GrevlexStrategy =213,214
data GrevlexStrategy = GrevlexStrategy deriving213,214
data GradedStrategy =220,221
data GradedStrategy = GradedStrategy deriving220,221
data SugarStrategy s229,230
data SugarStrategy s = SugarStrategy s229,230
minimizeGroebnerBasis ::239,240
minimizeGroebnerBasis bs241,242
reduceMinimalGroebnerBasis ::254,255
reduceMinimalGroebnerBasis bs256,257
monoize ::267,268
monoize f269,270
calcGroebnerBasisWith ::272,273
calcGroebnerBasisWith ord274,275
calcGroebnerBasisWithStrategy ::277,278
calcGroebnerBasisWithStrategy strategy280,281
calcGroebnerBasis ::284,285
calcGroebnerBasis =286,287
isIdealMember ::289,290
isIdealMember f291,292
groebnerTest ::294,295
groebnerTest f296,297
thEliminationIdeal ::299,300
thEliminationIdeal ::299,300
thEliminationIdealWith ::310,311
thEliminationIdealWith ::310,311
unsafeThEliminationIdealWith ::326,327
unsafeThEliminationIdealWith ::326,327
intersection ::340,341
intersection Nil346,347
quotByPrincipalIdeal ::358,359
quotByPrincipalIdeal i362,363
quotIdeal ::367,368
quotIdeal i371,372
saturationByPrincipalIdeal ::378,379
saturationByPrincipalIdeal is381,382
saturationIdeal ::386,387
saturationIdeal i390,391
resultant ::397,398
resultant =401,402
hasCommonFactor ::414,415
hasCommonFactor f418,419
lcmPolynomial ::420,421
lcmPolynomial f424,425
gcdPolynomial ::426,427
gcdPolynomial f429,430

./Algebra/Algorithms/ZeroDim.hs,938
module Algebra.Algorithms.ZeroDim (univPoly,9,10
tr ::58,59
tr =59,60
solveM ::61,62
solveM ideal66,67
solveWith ::80,81
solveWith f084,85
solve' ::114,115
solve' err118,119
subspMatrix ::132,133
subspMatrix on134,135
solveViaCompanion ::143,144
solveViaCompanion err148,149
matrixRep ::161,162
matrixRep f164,165
toComplex ::172,173
toComplex a173,174
reduction ::175,176
reduction on177,178
univPoly ::182,183
univPoly nth186,187
solveLinear ::205,206
solveLinear mat209,210
radical ::244,245
radical ideal246,247
isRadical ::251,252
isRadical ideal253,254
solve'' ::257,258
solve'' err263,264
solveLinearNA ::294,295
solveLinearNA m295,296
toDM ::297,298
toDM =298,299
fglm ::304,305
fglm ideal307,308
fglmMap ::312,313
fglmMap l318,319
mainLoop ::325,326
mainLoop =327,328
toContinue ::347,348
toContinue =349,350
nextMonomial ::357,358
nextMonomial =358,359
beta ::369,370
beta (a370,371

./Algebra/Field/Finite.hs,168
module Algebra.Field.Finite where6,7
newtype PField (n12,13
newtype PField (n :: Nat) = PF Integer deriving (Eq)12,13
instance Show14,15
char ::32,33
char =33,34

./Algebra/Instances.hs,223
module Algebra.Instances ()4,5
type instance Index13,14
type instance Index (V.Vector13,14
type instance IxValue14,15
type instance IxValue (V.Vector14,15
instance Functor15,16
updateNth ::21,22
updateNth V.OZ22,23

./Algebra/Internal.hs,63
module Algebra.Internal (4,5
toProxy ::10,11
toProxy _11,12

./Algebra/Linear.hs,2443
module Algebra.Linear (2,3
encode ::73,74
encode m75,76
decode ::77,78
decode m79,80
data Matrix a84,85
data Matrix a = M {84,85
   nrows ::85,86
 , ncols ::86,87
 , mvect ::87,88
sizeStr ::91,92
sizeStr n92,93
prettyMatrix ::95,96
prettyMatrix m@(M96,97
instance Show102,103
forceMatrix ::111,112
forceMatrix (M112,113
mapRow ::128,129
mapRow f131,132
mapCol ::142,143
mapCol f145,146
zero ::172,173
zero n176,177
matrix ::185,186
matrix n190,191
identity ::202,203
identity n203,204
fromList ::213,214
fromList n218,219
fromLists ::228,229
fromLists xss230,231
rowVector ::233,234
rowVector v234,235
colVector ::237,238
colVector v238,239
permMatrix ::256,257
permMatrix n261,262
getElem ::275,276
getElem i280,281
(!) :: Matrix284,285
m !285,286
safeGet ::288,289
safeGet i289,290
getRow ::294,295
getRow i295,296
getCol ::298,299
getCol j299,300
getDiag ::302,303
getDiag m303,304
msetElem:: PrimMonad311,312
msetElem x312,313
setElem ::315,316
setElem x319,320
transpose ::327,328
transpose m328,329
extendTo ::339,340
extendTo n343,344
submatrix ::360,361
submatrix r1367,368
minorMatrix ::379,380
minorMatrix r383,384
splitBlocks ::406,407
splitBlocks i412,413
joinBlocks ::416,417
joinBlocks (tl,tr,bl,br)420,421
"matrix/splitAndJoin"425,426
(<|>) :: Matrix435,436
(M n437,438
(<->) :: Matrix452,453
multStd ::488,489
multStd a1@(M490,491
multStd_ ::497,498
multStd_ a1@(M499,500
first ::501,502
first f502,503
strassen ::508,509
strassen (M510,511
multStrassen ::535,536
multStrassen a1@(M536,537
strmixFactor ::546,547
strmixFactor =547,548
strassenMixed ::550,551
strassenMixed a@(M553,554
multStrassenMixed ::581,582
multStrassenMixed a1@(M583,584
scaleMatrix ::638,639
scaleMatrix =639,640
scaleRow ::647,648
scaleRow =648,649
combineRows ::656,657
combineRows r1657,658
switchRows ::665,666
switchRows r1669,670
switchCols ::679,680
switchCols c1683,684
luDecomp ::719,720
luDecomp a720,721
recLUDecomp ::725,726
recLUDecomp u733,734
luDecomp' ::784,785
luDecomp' a785,786
recLUDecomp' ::790,791
recLUDecomp' u800,801
"matrix/traceOfSum"841,842
"matrix/traceOfScale"844,845
trace ::854,855
trace =855,856
diagProd ::863,864
diagProd =864,865
"matrix/detOfProduct"869,870
"matrix/detLUOfProduct"872,873
detLaplace ::879,880
detLaplace (M880,881
detLU ::885,886
detLU m886,887
toLists ::890,891
toLists mat891,892

./Algebra/Matrix.hs,805
module Algebra.Matrix (Matrix(..),3,4
  (<-->) :: Elem mat a => mat a -> mat55,56
  type Elem mat21,22
  cmap  ::22,23
  empty ::23,24
  fromLists ::24,25
  fromCols  ::25,26
  fromCols []26,27
  fromRows ::28,29
  fromRows []29,30
  toCols ::31,32
  toCols m32,33
  toRows ::33,34
  toRows m34,35
  ncols ::35,36
  nrows ::36,37
  identity ::37,38
  diag     ::38,39
  getDiag ::39,40
  trace ::40,41
  diagProd ::41,42
  zero ::42,43
  colVector ::43,44
  rowVector ::44,45
  getCol ::45,46
  getRow ::46,47
  trans ::47,48
  buildMatrix ::48,49
  index ::49,50
  index i50,51
  (!) :: Elem53,54
  (<||>) :: Elem54,55
  (<-->) :: Elem55,56
instance Matrix57,58
mapSM ::107,108
mapSM f108,109
delta ::140,141
delta i141,142
companion ::144,145
companion on147,148

./Algebra/Matrix_flymake.hs,805
module Algebra.Matrix (Matrix(..),3,4
  (<-->) :: Elem mat a => mat a -> mat55,56
  type Elem mat21,22
  cmap  ::22,23
  empty ::23,24
  fromLists ::24,25
  fromCols  ::25,26
  fromCols []26,27
  fromRows ::28,29
  fromRows []29,30
  toCols ::31,32
  toCols m32,33
  toRows ::33,34
  toRows m34,35
  ncols ::35,36
  nrows ::36,37
  identity ::37,38
  diag     ::38,39
  getDiag ::39,40
  trace ::40,41
  diagProd ::41,42
  zero ::42,43
  colVector ::43,44
  rowVector ::44,45
  getCol ::45,46
  getRow ::46,47
  trans ::47,48
  buildMatrix ::48,49
  index ::49,50
  index i50,51
  (!) :: Elem53,54
  (<||>) :: Elem54,55
  (<-->) :: Elem55,56
instance Matrix57,58
mapSM ::107,108
mapSM f108,109
delta ::140,141
delta i141,142
companion ::144,145
companion on147,148

./Algebra/Ring/Noetherian.hs,488
module Algebra.Ring.Noetherian (4,5
class (Commutative r, Ring r) => NoetherianRing r where19,20
instance Integral29,30
data Ideal r90,91
data Ideal r = forall n.90,91
addToIdeal ::101,102
addToIdeal i102,103
toIdeal ::108,109
toIdeal =109,110
appendIdeal ::111,112
appendIdeal (Ideal112,113
generators ::114,115
generators (Ideal115,116
filterIdeal ::117,118
filterIdeal p118,119
principalIdeal ::120,121
principalIdeal =121,122
mapIdeal ::123,124
mapIdeal fun124,125

./Algebra/Ring/Polynomial/HighLevel.hs,1082
module Algebra.Ring.Polynomial.HighLevel where6,7
rational ::30,31
rational =31,32
complexified ::33,34
complexified =34,35
double ::36,37
double =37,38
float ::39,40
float =40,41
pico ::42,43
pico =43,44
nano ::45,46
nano =46,47
unComplexify ::48,49
unComplexify _49,50
data RingData k51,52
data RingData k ord n = Ring {51,52
data RingData k ord n = Ring { _coefficient ::51,52
                             , _variables   ::52,53
                             , _ordering    ::53,54
                             , _qIdeal      ::54,55
instance SingRep57,58
class HasName a60,61
  name ::61,62
toProxy ::63,64
toProxy _64,65
name' ::66,67
name' =67,68
data Environment k103,104
data Environment k ord n = Env {103,104
data Environment k ord n = Env { _baseRing ::103,104
ring ::107,108
ring r110,111
qring ::115,116
qring ideal118,119
vars ::123,124
vars =125,126
qq ::131,132
qq =132,133
(^^) :: Unital134,135
(^^) =135,136
test01 =137,138
lex ::144,145
lex =145,146
grlex ::147,148
grlex =148,149
grevlex ::150,151
grevlex =151,152

./Algebra/Ring/Polynomial/Monomorphic.hs,1625
module Algebra.Ring.Polynomial.Monomorphic where4,5
data Variable =20,21
data Variable = Variable {20,21
data Variable = Variable { varName  ::20,21
                         , varIndex ::21,22
instance (Eq24,25
type Monomial =37,38
newtype Polynomial k39,40
newtype Polynomial k = Polynomial {39,40
newtype Polynomial k = Polynomial { unPolynomial ::39,40
normalize ::45,46
normalize (Polynomial46,47
normalizeMonom ::49,50
normalizeMonom =50,51
buildVarsList ::85,86
buildVarsList =86,87
encodeMonomList ::88,89
encodeMonomList vars89,90
encodeMonomial ::91,92
encodeMonomial vars92,93
encodePolynomial ::94,95
encodePolynomial =96,97
toPolynomialSetting ::98,99
toPolynomialSetting p99,100
data PolynomialSetting r104,105
data PolynomialSetting r = PolySetting {104,105
data PolynomialSetting r = PolySetting { dimension ::104,105
data PolynomialSetting r = PolySetting { dimension :: Monomorphic (Sing :: Nat104,105
                                       , polyn     ::105,106
uniformlyPromoteWithDim ::133,134
uniformlyPromoteWithDim d136,137
uniformlyPromote ::144,145
uniformlyPromote ps146,147
promoteList ::156,157
promoteList ps158,159
promoteListWithVarOrder ::162,163
promoteListWithVarOrder dic164,165
promoteListWithDim ::175,176
promoteListWithDim dim177,178
renameVars ::185,186
renameVars vars186,187
showPolynomial ::191,192
showPolynomial f192,193
showRatPolynomial ::200,201
showRatPolynomial f201,202
injectVar ::209,210
injectVar var210,211
injectCoeff ::212,213
injectCoeff c213,214
subst ::215,216
subst assign216,217
diff ::220,221
diff var221,222

./Algebra/Ring/Polynomial/Parser.hs,570
module Algebra.Ring.Polynomial.Parser (1,2
expression ::10,11
expression ::10,11
letter ::13,14
letter ::13,14
variable ::16,17
variable ::16,17
variableWithPower ::19,20
variableWithPower ::19,20
expr ::23,24
expr ::23,24
term ::28,29
term ::28,29
monoms ::33,34
monoms ::33,34
fact ::37,38
fact ::37,38
monomial :::42,43
monomial :::42,43
number ::45,46
number ::45,46
integer ::50,51
integer ::50,51
natural ::54,55
natural ::54,55
delimiter ::57,58
delimiter ::57,58
toPolyn ::62,63
toPolyn =63,64
parsePolyn ::65,66
parsePolyn =66,67

./Algebra/Ring/Polynomial/Quotient.hs,1603
module Algebra.Ring.Polynomial.Quotient (4,5
data Quotient r34,35
data Quotient r ord n ideal = Quotient {34,35
data Quotient r ord n ideal = Quotient { quotRepr_ ::34,35
data QIdeal r36,37
data QIdeal r ord n = ZeroDimIdeal {36,37
data QIdeal r ord n = ZeroDimIdeal { _gBasis   ::36,37
                                   , _vBasis   ::37,38
                                   , multTable ::38,39
                    | QIdeal {40,41
                    | QIdeal { _gBasis ::40,41
instance NFData43,44
type Table r46,47
type Table r ord46,47
vectorRep ::50,51
vectorRep f53,54
matRepr' ::58,59
matRepr' f61,62
matRep0 ::71,72
matRep0 pxy74,75
multUnamb ::79,80
multUnamb a82,83
multWithTable ::84,85
multWithTable f87,88
buildMultTable ::97,98
buildMultTable bs99,100
stdMonoms ::103,104
stdMonoms basis105,106
standardMonomials' ::125,126
standardMonomials' pxy127,128
standardMonomials ::132,133
standardMonomials =136,137
genQuotVars' ::138,139
genQuotVars' pxy141,142
genQuotVars ::143,144
genQuotVars =146,147
minimum' ::148,149
minimum' []149,150
diag ::152,153
diag _153,154
modIdeal ::158,159
modIdeal =161,162
gBasis' ::163,164
gBasis' pxy165,166
gBasis ::167,168
gBasis =170,171
modIdeal' ::173,174
modIdeal' pxy175,176
buildQIdeal ::177,178
buildQIdeal ideal179,180
reifyQuotient ::186,187
reifyQuotient ideal190,191
withQuotient ::193,194
withQuotient ideal197,198
asProxyOf ::200,201
asProxyOf a201,202
quotRepr ::204,205
quotRepr =205,206
reduce ::244,245
reduce f246,247
isZeroDimensional ::248,249
isZeroDimensional ii249,250

./Algebra/Ring/Polynomial.hs,5411
module Algebra.Ring.Polynomial6,7
import           Proof.Equational27,28
type Monomial (n51,52
type Monomial (n ::51,52
instance (NFData53,54
fromList ::69,70
fromList SZ70,71
type MonomialOrder =78,79
totalDegree ::80,81
totalDegree =81,82
totalDegree' ::84,85
totalDegree' =85,86
lex ::88,89
lex Nil89,90
revlex ::94,95
revlex (x95,96
graded ::100,101
graded cmp101,102
"graded/grevlex" graded104,105
"graded/grlex"   graded105,106
grlex ::109,110
grlex =110,111
grevlex ::114,115
grevlex =115,116
newtype OrderedMonomial (ordering119,120
newtype OrderedMonomial (ordering :: *) n = OrderedMonomial { getMonomial ::119,120
newtype OrderedMonomial (ordering :: *) n = OrderedMonomial { getMonomial :: Monomial n119,120
class IsOrder (ordering140,141
  cmpMonomial ::141,142
data Lex =146,147
data Lex = Lex146,147
data Revlex =150,151
data Revlex = Revlex150,151
data Grevlex =154,155
data Grevlex = Grevlex154,155
data Grlex =158,159
data Grlex = Grlex158,159
data Graded ord162,163
data Graded ord = Graded ord162,163
data ProductOrder (n170,171
data ProductOrder (n :: Nat)170,171
data ProductOrder (n :: Nat) (a :: *) (b ::170,171
data ProductOrder (n :: Nat) (a :: *) (b :: *) where170,171
  ProductOrder ::171,172
data ProductOrder (n :: Nat)170,171
productOrder ::173,174
productOrder _175,176
productOrder' ::180,181
productOrder' n182,183
data WeightProxy (v185,186
data WeightProxy (v :: [Nat])185,186
  NilWeight  ::186,187
  ConsWeight ::187,188
data WeightProxy (v :: [Nat])185,186
data WeightOrder (v189,190
data WeightOrder (v :: [Nat])189,190
data WeightOrder (v :: [Nat]) (ord :: *) where189,190
  WeightOrder ::190,191
  WeightOrder :: WeightProxy (v :: [Nat])190,191
data WeightOrder (v :: [Nat])189,190
class ToWeightVector (vs192,193
  calcOrderWeight ::193,194
weightOrder ::202,203
weightOrder Proxy204,205
class IsOrder name => IsMonomialOrder name227,228
class (IsMonomialOrder ord, SingRep n) => EliminationType n ord239,240
type EliminationOrder n246,247
type EliminationOrder n =246,247
eliminationOrder ::248,249
eliminationOrder n249,250
weightedEliminationOrder ::253,254
weightedEliminationOrder n254,255
type family EWeight256,257
type instance EWeight257,258
type instance EWeight Z257,258
type instance EWeight258,259
data WeightedEliminationOrder (n260,261
data WeightedEliminationOrder (n :: Nat)260,261
data WeightedEliminationOrder (n :: Nat) (ord :: *) where260,261
    WEOrder ::261,262
data WeightedEliminationOrder (n :: Nat)260,261
  OrderedMonomial m `compare` OrderedMonomial n277,278
newtype OrderedPolynomial r287,288
newtype OrderedPolynomial r order n = Polynomial {287,288
newtype OrderedPolynomial r order n = Polynomial { terms ::287,288
type Polynomial r288,289
type Polynomial r =288,289
type IsPolynomial r291,292
coeff ::294,295
coeff d295,296
castMonomial ::302,303
castMonomial ::302,303
scastMonomial ::305,306
scastMonomial ::305,306
castPolynomial ::308,309
castPolynomial ::308,309
scastPolynomial ::313,314
scastPolynomial ::313,314
mapCoeff ::317,318
mapCoeff f319,320
normalize ::321,322
normalize (Polynomial323,324
injectCoeff ::329,330
injectCoeff r330,331
showPolynomialWithVars ::371,372
showPolynomialWithVars dic373,374
data Coefficient =391,392
data Coefficient = Zero |391,392
data Coefficient = Zero | Negative String391,392
data Coefficient = Zero | Negative String | Positive String391,392
data Coefficient = Zero | Negative String | Positive String | Eps391,392
showRational ::394,395
showRational r395,396
showPolynomialWith  ::402,403
showPolynomialWith useAst404,405
isConstantMonomial ::438,439
isConstantMonomial v439,440
varX ::451,452
varX =452,453
var ::454,455
var vIndex455,456
buildIdx ::457,458
buildIdx OZ458,459
toPolynomial ::467,468
toPolynomial (c,468,469
polynomial ::470,471
polynomial dic471,472
leadingTerm ::473,474
leadingTerm (Polynomial475,476
leadingMonomial ::480,481
leadingMonomial =483,484
leadingCoeff ::485,486
leadingCoeff =486,487
divs ::488,489
(OrderedMonomial xs) `divs` (OrderedMonomial ys) = and489,490
isPowerOf ::491,492
OrderedMonomial n `isPowerOf` OrderedMonomial m492,493
tryDiv ::497,498
lcmMonomial ::502,503
lcmMonomial (OrderedMonomial503,504
subst ::505,506
subst assign506,507
substWith ::512,513
substWith o513,514
subst' ::518,519
subst' p523,524
allVars ::529,530
allVars =531,532
diff ::534,535
diff mthVar536,537
updateNth ::543,544
updateNth OZ544,545
sPolynomial ::548,549
sPolynomial f551,552
changeMonomialOrder ::555,556
changeMonomialOrder _556,557
changeMonomialOrderProxy ::558,559
changeMonomialOrderProxy _559,560
changeOrder ::562,563
changeOrder _564,565
changeOrderProxy ::566,567
changeOrderProxy _568,569
getTerms ::570,571
getTerms =571,572
transformMonomial ::573,574
transformMonomial trans575,576
orderedBy ::577,578
p `orderedBy` _ =578,579
shiftR ::580,581
shiftR k582,583
genVars ::586,587
genVars sn588,589
homogenize ::591,592
homogenize f593,594
unhomogenize ::598,599
unhomogenize f600,601
initSV ::604,605
initSV (_605,606
sArity ::609,610
sArity (Polynomial610,611
"sArity/zero" forall612,613
"sArity/one" forall613,614
"sArity/two" forall614,615
"sArity/three" forall615,616
"sArity/four" forall616,617
"sArity/five" forall617,618
"sArity/sing" forall618,619

./Algebra/Ring/PolynomialAccumulated.hs,5200
module Algebra.Ring.PolynomialAccumulated6,7
newtype Monomial (n46,47
newtype Monomial (n :: Nat) = Monomial { monomial_   ::46,47
newtype Monomial (n :: Nat) = Monomial { monomial_   :: Vector (Int,46,47
degree ::49,50
degree =50,51
instance NFData52,53
fromList ::71,72
fromList SZ72,73
fromListV ::81,82
fromListV SZ82,83
type MonomialOrder =90,91
totalDegree ::92,93
totalDegree (Monomial93,94
totalDegree' ::96,97
totalDegree' =97,98
lex ::100,101
lex =101,102
lex0 ::103,104
lex0 Nil104,105
revlex ::109,110
revlex =110,111
revlex0 ::112,113
revlex0 ((x,113,114
graded ::118,119
graded cmp119,120
"graded/grevlex" graded122,123
"graded/grlex"   graded123,124
grlex ::127,128
grlex =128,129
grevlex ::132,133
grevlex =133,134
withLen ::136,137
withLen Nil137,138
newtype OrderedMonomial (ordering144,145
newtype OrderedMonomial (ordering :: *) n = OrderedMonomial { getMonomial ::144,145
newtype OrderedMonomial (ordering :: *) n = OrderedMonomial { getMonomial :: Monomial n144,145
class IsOrder (ordering151,152
  cmpMonomial ::152,153
data Lex =157,158
data Lex = Lex157,158
data Revlex =161,162
data Revlex = Revlex161,162
data Grevlex =165,166
data Grevlex = Grevlex165,166
data Grlex =169,170
data Grlex = Grlex169,170
data Graded ord173,174
data Graded ord = Graded ord173,174
data ProductOrder (n181,182
data ProductOrder (n :: Nat)181,182
data ProductOrder (n :: Nat) (a :: *) (b ::181,182
data ProductOrder (n :: Nat) (a :: *) (b :: *) where181,182
  ProductOrder ::182,183
data ProductOrder (n :: Nat)181,182
productOrder ::184,185
productOrder _186,187
productOrder' ::192,193
productOrder' n194,195
data WeightProxy (v197,198
data WeightProxy (v :: [Nat])197,198
  NilWeight  ::198,199
  ConsWeight ::199,200
data WeightProxy (v :: [Nat])197,198
data WeightOrder (v201,202
data WeightOrder (v :: [Nat])201,202
data WeightOrder (v :: [Nat]) (ord :: *) where201,202
  WeightOrder ::202,203
  WeightOrder :: WeightProxy (v :: [Nat])202,203
data WeightOrder (v :: [Nat])201,202
class ToWeightVector (vs204,205
  calcOrderWeight ::205,206
weightOrder ::214,215
weightOrder Proxy216,217
class IsOrder name => IsMonomialOrder name239,240
class (IsMonomialOrder ord, SingRep n) => EliminationType n ord251,252
type EliminationOrder n258,259
type EliminationOrder n =258,259
eliminationOrder ::260,261
eliminationOrder n261,262
weightedEliminationOrder ::265,266
weightedEliminationOrder n266,267
type family EWeight268,269
type instance EWeight269,270
type instance EWeight Z269,270
type instance EWeight270,271
data WeightedEliminationOrder (n272,273
data WeightedEliminationOrder (n :: Nat)272,273
data WeightedEliminationOrder (n :: Nat) (ord :: *) where272,273
    WEOrder ::273,274
data WeightedEliminationOrder (n :: Nat)272,273
  OrderedMonomial m `compare` OrderedMonomial n293,294
newtype OrderedPolynomial r303,304
newtype OrderedPolynomial r order n = Polynomial {303,304
newtype OrderedPolynomial r order n = Polynomial { terms ::303,304
type Polynomial r304,305
type Polynomial r =304,305
type IsPolynomial r307,308
coeff ::310,311
coeff d311,312
castMonomial ::317,318
castMonomial ::317,318
scastMonomial ::320,321
scastMonomial ::320,321
castPolynomial ::323,324
castPolynomial ::323,324
scastPolynomial ::328,329
scastPolynomial ::328,329
normalize ::332,333
normalize =334,335
injectCoeff ::340,341
injectCoeff r341,342
showPolynomialWithVars ::383,384
showPolynomialWithVars dic385,386
data Coefficient =403,404
data Coefficient = Zero |403,404
data Coefficient = Zero | Negative String403,404
data Coefficient = Zero | Negative String | Positive String403,404
data Coefficient = Zero | Negative String | Positive String | Eps403,404
showRational ::406,407
showRational r407,408
showPolynomialWith  ::414,415
showPolynomialWith vDic416,417
isConstantMonomial ::441,442
isConstantMonomial v442,443
varX ::454,455
varX ::454,455
var ::457,458
var ::457,458
toPolynomial ::460,461
toPolynomial (c,461,462
polynomial ::463,464
polynomial dic464,465
buildIndex ::466,467
buildIndex (SS467,468
leadingTerm ::470,471
leadingTerm (Polynomial472,473
leadingMonomial ::477,478
leadingMonomial =478,479
leadingOrderedMonomial ::480,481
leadingOrderedMonomial =482,483
leadingCoeff ::484,485
leadingCoeff =485,486
divs ::487,488
xs `divs` ys =488,489
tryDiv ::490,491
lcmMonomial ::495,496
lcmMonomial m496,497
subst ::498,499
subst assign499,500
diff ::504,505
diff ::504,505
updateNth ::512,513
updateNth ::512,513
sPolynomial ::517,518
sPolynomial f520,521
changeOrder ::524,525
changeOrder _526,527
changeOrderProxy ::528,529
changeOrderProxy _530,531
getTerms ::532,533
getTerms =533,534
transformMonomial ::535,536
transformMonomial trans537,538
orderedBy ::539,540
p `orderedBy` _ =540,541
shiftR ::542,543
shiftR k544,545
genVars ::548,549
genVars sn550,551
sArity ::555,556
sArity (Polynomial556,557
"sArity/zero" forall558,559
"sArity/one" forall559,560
"sArity/two" forall560,561
"sArity/three" forall561,562
"sArity/four" forall562,563
"sArity/five" forall563,564
"sArity/sing" forall564,565

./Algebra/Scalar.hs,203
module Algebra.Scalar (Scalar(..),2,3
newtype Scalar r7,8
newtype Scalar r = Scalar {7,8
newtype Scalar r = Scalar { runScalar ::7,8
(.*.) :: (RightModule11,12
r .*.13,14
instance LeftModule27,28

./Algebra/Wrapped.hs,317
module Algebra.Wrapped (WrappedField(..),7,8
newtype WrappedField a18,19
newtype WrappedField a = WrapField {18,19
newtype WrappedField a = WrapField { unwrapField ::18,19
instance LeftModule36,37
class Additive (Norm a) => Normed a where46,47
  type Norm a47,48
  norm ::48,49
  liftNorm ::49,50
sq x56,57

./bench/bench.hs,505
x, y, z, w, s, a, b, c :: Polynomial Rational11,12
x, y, z, w, s, a, b, c :: Polynomial Rational11,12
x, y, z, w, s, a, b, c :: Polynomial Rational11,12
x, y, z, w, s, a, b, c :: Polynomial11,12
x, y, z, w, s, a, b, c11,12
x, y, z, w, s, a,11,12
x, y, z, w,11,12
x, y,11,12
[x, y,12,13
instance NFData14,15
i1, i2, i3, i4 :: [Polynomial Rational]20,21
i1, i2, i3, i4 :: [Polynomial20,21
i1, i2, i3, i420,21
i1, i2,20,21
i1 =21,22
i2 =22,23
i3 =23,24
i4 =25,26
main ::27,28
main =28,29

./bench/division.hs,244
module Main where4,5
makeIdeals ::20,21
makeIdeals count21,22
mkTestCases ::26,27
mkTestCases is27,28
main ::37,38
main =38,39
divModPolynomial' ::55,56
divModPolynomial' f058,59
divModPolynomial'' ::80,81
divModPolynomial'' f083,84

./bench/elimination-bench.hs,731
x, y, z, w, s, a, b, c, t, u, v :: Polynomial Rational15,16
x, y, z, w, s, a, b, c, t, u, v :: Polynomial Rational15,16
x, y, z, w, s, a, b, c, t, u, v :: Polynomial Rational15,16
x, y, z, w, s, a, b, c, t, u, v :: Polynomial Rational15,16
x, y, z, w, s, a, b, c, t, u, v :: Polynomial Rational15,16
x, y, z, w, s, a, b, c, t, u, v ::15,16
x, y, z, w, s, a, b, c, t, u,15,16
x, y, z, w, s, a, b, c,15,16
x, y, z, w, s, a,15,16
x, y, z, w,15,16
x, y,15,16
[x, y,16,17
instance NFData18,19
i1, i2, i3, i4 :: [Polynomial Rational]24,25
i1, i2, i3, i4 :: [Polynomial24,25
i1, i2, i3, i424,25
i1, i2,24,25
i1 =25,26
i2 =26,27
i3 =27,28
i4 =29,30
mkTestCase ::31,32
mkTestCase name32,33
main ::38,39
main =39,40

./bench/linear.hs,137
module Main where4,5
makeLinear ::18,19
makeLinear count19,20
mkTestCases ::24,25
mkTestCases lins025,26
main ::33,34
main =34,35

./bench/monomials.hs,384
module Main where1,2
data MonomPair =14,15
data MonomPair = forall n.14,15
data MonomPair = forall n. MonomPair { getMonoms ::14,15
data AMonomPair =15,16
data AMonomPair = forall n.15,16
data AMonomPair = forall n. AMonomPair { getAMonoms ::15,16
instance NFData17,18
main ::23,24
main =24,25
genMonomial ::29,30
genMonomial =30,31
mkTestCase ::44,45
mkTestCase n45,46

./bench/quotient-bench-randomized.hs,137
module Main where4,5
makeIdeals ::23,24
makeIdeals count24,25
mkTestCases ::26,27
mkTestCases count27,28
main ::40,41
main =41,42

./bench/SingularBench.hs,441
module SingularBench where2,3
formatPoly ::20,21
formatPoly (Polynomial21,22
formatTerm ::24,25
formatTerm k25,26
showCoeff ::29,30
showCoeff Zero30,31
formatMonom ::35,36
formatMonom =36,37
formatIdeal ::38,39
formatIdeal =39,40
class IsMonomialOrder ord => SingularRep ord41,42
  singularRep ::42,43
instance SingularRep44,45
type Ideal =67,68
skeleton ::69,70
skeleton ord70,71
singularWith ::80,81
singularWith =81,82

./bench/solve.hs,377
module Main where4,5
x, y, z :: Polynomial Rational28,29
x, y, z ::28,29
x, y,28,29
[x, y,29,30
(.*) :: SingRep31,32
(.*) =32,33
(^^) :: Unital36,37
eqn01 ::39,40
eqn01 =40,41
eqn02 ::42,43
eqn02 =43,44
eqn03 ::49,50
eqn03 =50,51
eqn04 ::55,56
eqn04 =56,57
mkBench ::58,59
mkBench is59,60
randomCase ::68,69
randomCase count69,70
main ::73,74
main =74,75

./bench/solve.hs~,377
module Main where4,5
x, y, z :: Polynomial Rational26,27
x, y, z ::26,27
x, y,26,27
[x, y,27,28
(.*) :: SingRep29,30
(.*) =30,31
(^^) :: Unital34,35
eqn01 ::37,38
eqn01 =38,39
eqn02 ::40,41
eqn02 =41,42
eqn03 ::47,48
eqn03 =48,49
eqn04 ::53,54
eqn04 =54,55
mkBench ::56,57
mkBench is57,58
randomCase ::64,65
randomCase count65,66
main ::69,70
main =70,71

./bench/sugar-bench.hs,578
x, y, z, w, s, a, b, c :: Polynomial Rational10,11
x, y, z, w, s, a, b, c :: Polynomial Rational10,11
x, y, z, w, s, a, b, c :: Polynomial Rational10,11
x, y, z, w, s, a, b, c :: Polynomial10,11
x, y, z, w, s, a, b, c10,11
x, y, z, w, s, a,10,11
x, y, z, w,10,11
x, y,10,11
[x, y,11,12
instance NFData13,14
i1, i2, i3, i4 :: [Polynomial Rational]19,20
i1, i2, i3, i4 :: [Polynomial19,20
i1, i2, i3, i419,20
i1, i2,19,20
i1 =20,21
i2 =21,22
i3 =22,23
i4 =24,25
mkTestCases ::26,27
mkTestCases num27,28
mkTC ::32,33
mkTC name33,34
main ::41,42
main =42,43

./bench/sugar-paper.hs,592
x, y, z, w, s, a, b, c :: Polynomial Rational11,12
x, y, z, w, s, a, b, c :: Polynomial Rational11,12
x, y, z, w, s, a, b, c :: Polynomial Rational11,12
x, y, z, w, s, a, b, c :: Polynomial11,12
x, y, z, w, s, a, b, c11,12
x, y, z, w, s, a,11,12
x, y, z, w,11,12
x, y,11,12
[x, y,12,13
instance NFData14,15
parse x20,21
i1, i2, i3, i4 :: [Polynomial Rational]24,25
i1, i2, i3, i4 :: [Polynomial24,25
i1, i2, i3, i424,25
i1, i2,24,25
i1 =25,26
i2 =42,43
i3 =45,46
i4 =46,47
mkTestCases ::48,49
mkTestCases num49,50
mkTC ::53,54
mkTC name54,55
main ::59,60
main =60,61

./bench/sugar.hs,505
x, y, z, w, s, a, b, c :: Polynomial Rational11,12
x, y, z, w, s, a, b, c :: Polynomial Rational11,12
x, y, z, w, s, a, b, c :: Polynomial Rational11,12
x, y, z, w, s, a, b, c :: Polynomial11,12
x, y, z, w, s, a, b, c11,12
x, y, z, w, s, a,11,12
x, y, z, w,11,12
x, y,11,12
[x, y,12,13
instance NFData14,15
i1, i2, i3, i4 :: [Polynomial Rational]20,21
i1, i2, i3, i4 :: [Polynomial20,21
i1, i2, i3, i420,21
i1, i2,20,21
i1 =21,22
i2 =22,23
i3 =23,24
i4 =25,26
main ::27,28
main =28,29

./dist/build/autogen/Paths_computational_algebra.hs,930
module Paths_computational_algebra (0,1
catchIO ::11,12
catchIO =12,13
version ::15,16
version =16,17
bindir, libdir, datadir, libexecdir, sysconfdir :: FilePath17,18
bindir, libdir, datadir, libexecdir, sysconfdir :: FilePath17,18
bindir, libdir, datadir, libexecdir, sysconfdir ::17,18
bindir, libdir, datadir, libexecdir,17,18
bindir, libdir,17,18
bindir     =19,20
libdir     =20,21
datadir    =21,22
libexecdir =22,23
sysconfdir =23,24
getBinDir, getLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePath25,26
getBinDir, getLibDir, getDataDir, getLibexecDir, getSysconfDir :: IO FilePath25,26
getBinDir, getLibDir, getDataDir, getLibexecDir, getSysconfDir ::25,26
getBinDir, getLibDir, getDataDir, getLibexecDir,25,26
getBinDir, getLibDir,25,26
getBinDir =26,27
getLibDir =27,28
getDataDir =28,29
getLibexecDir =29,30
getSysconfDir =30,31
getDataFileName ::32,33
getDataFileName name33,34

./examples/monomorphic.hs,375
module Example where3,4
(^^) :: Unital20,21
(^^) =21,22
x, y, f, f1, f2 :: Polynomial (Ratio Integer)23,24
x, y, f, f1, f2 :: Polynomial (Ratio23,24
x, y, f, f1, f2 ::23,24
x, y, f, f1,23,24
x, y,23,24
x =24,25
y =25,26
f =26,27
f1 =27,28
f2 =28,29
heron ::30,31
heron =31,32
main ::39,40
main =40,41
idealMembershipDemo ::66,67
idealMembershipDemo =67,68

./examples/poly-02.hs,99
module Main where1,2
x, y :: OrderedPolynomial7,8
x, y7,8
[x, y]8,9
main ::10,11
main =11,12

./examples/poly-02.hs~,95
module Main where0,1
x, y :: OrderedPolynomial4,5
x, y4,5
[x, y]5,6
main ::7,8
main =8,9

./examples/polymorphic.hs,388
module Example where2,3
(^^) :: Unital15,16
(^^) =16,17
x, y, f, f1, f2 :: Polynomial (Ratio Integer) Two18,19
x, y, f, f1, f2 :: Polynomial (Ratio18,19
x, y, f, f1, f2 ::18,19
x, y, f, f1,18,19
x, y,18,19
x =19,20
y =20,21
f =21,22
f1 =22,23
f2 =23,24
type LexPolynomial r25,26
type LexPolynomial r n25,26
heronIdeal ::27,28
heronIdeal =28,29
main ::36,37
main =37,38

./examples/quotient.hs,197
module Main (module3,4
x, y :: Polynomial24,25
x, y24,25
[x, y]25,26
(^^) :: Unital27,28
(^^) =28,29
(/) :: Integer30,31
fromRight ::35,36
fromRight (Right36,37
main ::39,40
main =40,41

./examples/quotient.hs~,206
module Main (module3,4
x, y :: Polynomial22,23
x, y22,23
[x, y]23,24
(^^) :: Unital25,26
(^^) =26,27
(/) :: Integer28,29
fromRight ::33,34
fromRight (Right34,35
main ::37,38
main =38,39
{-48,49

./examples/sandpit-poly.hs,442
module Main (module2,3
u, v, x, y, z :: Polynomial Rational (S (S14,15
u, v, x, y, z :: Polynomial Rational14,15
u, v, x, y, z ::14,15
u, v, x, y,14,15
u, v,14,15
[u, v,15,16
(.+), (.*), (.-) :: SingRep n => Polynomial Rational n ->17,18
(.+), (.*), (.-) :: SingRep n =>17,18
(.+), (.*), (.-)17,18
(.+) =18,19
(^^^) :: SingRep25,26
fromRight ::28,29
fromRight (Right29,30
parse ::32,33
parse =33,34
main ::36,37
main =37,38

./examples/sandpit.hs,690
module Main (module0,1
var_x, var_y, var_z, var_t, var_u :: Variable17,18
var_x, var_y, var_z, var_t, var_u :: Variable17,18
var_x, var_y, var_z, var_t, var_u ::17,18
var_x, var_y, var_z, var_t,17,18
var_x, var_y,17,18
[var_c, var_s,18,19
x, y, z, t, u :: Polynomial Rational20,21
x, y, z, t, u :: Polynomial Rational20,21
x, y, z, t, u ::20,21
x, y, z, t,20,21
x, y,20,21
[c, s,21,22
(.+), (.*), (.-) :: Polynomial Rational -> Polynomial Rational -> Polynomial23,24
(.+), (.*), (.-) :: Polynomial Rational ->23,24
(.+), (.*), (.-)23,24
(.+) =24,25
(^^^) :: Polynomial31,32
fromRight ::34,35
fromRight (Right35,36
parse ::38,39
parse =39,40
main ::42,43
main =43,44

./examples/solve-prof.hs,583
module Main (module4,5
tr ::40,41
tr a41,42
x, y, z, w :: Polynomial Rational Four43,44
x, y, z, w :: Polynomial43,44
x, y, z, w43,44
x, y,43,44
[x, y,44,45
(.*) :: SingRep46,47
(.*) =47,48
(^^) :: Unital51,52
fromRight ::54,55
fromRight (Right55,56
printLvl ::58,59
printLvl lvl59,60
eqn01 ::61,62
eqn01 =62,63
findUnivar ::68,69
findUnivar poly69,70
toCoeffList ::74,75
toCoeffList on75,76
showSols err79,80
main ::94,95
main =95,96
evaluate' ::99,100
evaluate' a100,101
substIdeal ::102,103
substIdeal =105,106
toComplex ::107,108
toComplex =108,109

./examples/solve-prof.hs~,744
module Main (module4,5
tr ::38,39
tr a39,40
x, y, z :: Polynomial Rational41,42
x, y, z ::41,42
x, y,41,42
[x, y,42,43
(.*) :: SingRep44,45
(.*) =45,46
(^^) :: Unital49,50
seed ::52,53
seed =53,54
seedMat ::55,56
seedMat =56,57
fromRight ::58,59
fromRight (Right59,60
printLvl ::62,63
printLvl lvl63,64
eqn01 ::65,66
eqn01 =66,67
eqn02 ::68,69
eqn02 =69,70
eqn03 ::75,76
eqn03 =76,77
jdeal ::81,82
jdeal =82,83
vs ::85,86
vs =86,87
mat ::88,89
mat =89,90
fromCols ::91,92
fromCols =92,93
findUnivar ::94,95
findUnivar poly95,96
toCoeffList ::100,101
toCoeffList on101,102
showSols err105,106
main ::120,121
main =121,122
substIdeal ::153,154
substIdeal =156,157
toComplex ::158,159
toComplex =159,160

./examples/solve.hs,744
module Main (module4,5
tr ::38,39
tr a39,40
x, y, z :: Polynomial Rational41,42
x, y, z ::41,42
x, y,41,42
[x, y,42,43
(.*) :: SingRep44,45
(.*) =45,46
(^^) :: Unital49,50
seed ::52,53
seed =53,54
seedMat ::55,56
seedMat =56,57
fromRight ::58,59
fromRight (Right59,60
printLvl ::62,63
printLvl lvl63,64
eqn01 ::65,66
eqn01 =66,67
eqn02 ::68,69
eqn02 =69,70
eqn03 ::75,76
eqn03 =76,77
jdeal ::81,82
jdeal =82,83
vs ::85,86
vs =86,87
mat ::88,89
mat =89,90
fromCols ::91,92
fromCols =92,93
findUnivar ::94,95
findUnivar poly95,96
toCoeffList ::100,101
toCoeffList on101,102
showSols err105,106
main ::120,121
main =121,122
substIdeal ::153,154
substIdeal =156,157
toComplex ::158,159
toComplex =159,160

./examples/solve.hs~,470
module Main (module2,3
u, v, x, y, z :: Polynomial Rational (S (S14,15
u, v, x, y, z :: Polynomial Rational14,15
u, v, x, y, z ::14,15
u, v, x, y,14,15
u, v,14,15
[u, v,15,16
(.+), (.*), (.-) :: Polynomial Rational (S Three) -> Polynomial Rational17,18
(.+), (.*), (.-) :: Polynomial Rational (S17,18
(.+), (.*), (.-)17,18
(.+) =18,19
(^^^) :: Polynomial25,26
fromRight ::28,29
fromRight (Right29,30
parse ::32,33
parse =33,34
main ::36,37
main =37,38

./profile/mult-table-prof.hs,234
module Main where1,2
type Polyn =22,23
(^^) :: Unital24,25
(^^) =25,26
(/) :: Integer27,28
a /28,29
x, y :: Polynomial30,31
x, y30,31
[x, y]31,32
ideal ::33,34
ideal =34,35
fs ::36,37
fs =37,38
main ::39,40
main =40,41

./Setup.hs,11
main =1,2

./share/HspecSmallCheck.hs,90
module HspecSmallCheck where2,3
property ::9,10
property =10,11
instance Example12,13

./share/SequenceMonomial.hs,712
module SequenceMonomial (Monomial(),1,2
length ::11,12
length =12,13
fromList ::14,15
fromList xs15,16
viewl ::17,18
viewl (Monomial18,19
viewr ::23,24
viewr (Monomial24,25
data ViewL =29,30
data ViewL = EmptyL |29,30
data ViewL = EmptyL | Int :<29,30
data ViewR =30,31
data ViewR = EmptyR |30,31
data ViewR = EmptyR | Monomial :>30,31
data Monomial =32,33
data Monomial = Monomial {32,33
data Monomial = Monomial { getSeq      ::32,33
                         , totalDegree ::33,34
instance NFData36,37
type MonomialOrder =39,40
lex ::42,43
lex (viewl43,44
revlex ::48,49
revlex (viewr49,50
graded ::54,55
graded cmp55,56
grlex ::59,60
grlex =60,61
grevlex ::64,65
grevlex =65,66

./share/SingularBridge.hs,561
module SingularBridge (singIdealFun,2,3
class IsMonomialOrder ord => SingularOrder ord17,18
  singularOrder ::18,19
instance SingularOrder20,21
idealProgram ::26,27
idealProgram fun30,31
singular ::43,44
singular code44,45
readSingularIdeal ::46,47
readSingularIdeal n48,49
readSingularPoly ::51,52
readSingularPoly _53,54
readPoly st58,59
readPoly' st62,63
readCoeff st70,71
readTerm st80,81
readTerm' st84,85
readFactor st90,91
readVar st92,93
singIdealFun ::102,103
singIdealFun fun104,105
singPolyFun ::108,109
singPolyFun fun112,113

./share/SingularBridge.hs~,32
module SingularBridge where0,1

./share/Utils.hs,1279
module Utils (ZeroDimIdeal(..),6,7
import           Proof.Equational15,16
newtype ZeroDimIdeal n38,39
newtype ZeroDimIdeal n = ZeroDimIdeal {38,39
newtype ZeroDimIdeal n = ZeroDimIdeal { getIdeal ::38,39
(%.) :: Integral41,42
a %.42,43
instance (Integral45,46
appendLM ::67,68
appendLM coef68,69
xPoly ::70,71
xPoly =71,72
yPoly ::77,78
yPoly =78,79
arbVec ::93,94
arbVec =94,95
polyOfDim ::117,118
polyOfDim sn118,119
idealOfDim ::120,121
idealOfDim sn121,122
quotOfDim ::123,124
quotOfDim _125,126
genLM ::127,128
genLM SZ128,129
zeroDimOf ::138,139
zeroDimOf sn139,140
zeroDimG ::146,147
zeroDimG =147,148
arbitraryRational ::152,153
arbitraryRational =153,154
isNonTrivial ::159,160
isNonTrivial (ZeroDimIdeal160,161
data Equation =162,163
data Equation = Equation {162,163
data Equation = Equation { coefficients ::162,163
                         , answers      ::163,164
newtype MatrixCase a166,167
newtype MatrixCase a = MatrixCase {166,167
newtype MatrixCase a = MatrixCase { getMatrix ::166,167
arbitrarySolvable ::181,182
arbitrarySolvable =182,183
liftSNat ::187,188
liftSNat f188,189
unaryPoly ::194,195
unaryPoly arity195,196
checkForArity ::208,209
checkForArity as209,210
stdReduced ::211,212
stdReduced ps213,214

./tests/division.hs,203
module Main where2,3
main ::13,14
main =14,15
prop_divCorrect ::23,24
prop_divCorrect sdim24,25
prop_indivisible ::31,32
prop_indivisible sdim32,33
prop_degdecay ::39,40
prop_degdecay sdim40,41

./tests/division_flymake.hs,203
module Main where2,3
main ::13,14
main =14,15
prop_divCorrect ::23,24
prop_divCorrect sdim24,25
prop_indivisible ::31,32
prop_indivisible sdim32,33
prop_degdecay ::39,40
prop_degdecay sdim40,41

./tests/GroebnerSpec.hs,664
module GroebnerSpec where2,3
asGenListOf ::17,18
asGenListOf =18,19
spec ::20,21
spec =21,22
prop_intersection ::56,57
prop_intersection sdim57,58
prop_isMinimal ::64,65
prop_isMinimal sdim65,66
prop_isReduced ::71,72
prop_isReduced sdim72,73
prop_passesSTest ::78,79
prop_passesSTest sdim79,80
prop_groebnerDivsOrig ::84,85
prop_groebnerDivsOrig sdim85,86
prop_divCorrect ::91,92
prop_divCorrect sdim92,93
prop_indivisible ::99,100
prop_indivisible sdim100,101
prop_degdecay ::107,108
prop_degdecay sdim108,109
data IntersectCase r115,116
data IntersectCase r ord n = IC [OrderedPolynomial115,116
ics_binary ::117,118
ics_binary =118,119

./tests/linear.hs,218
module Main where0,1
main ::8,9
main =9,10
prop_luDecomp ::14,15
prop_luDecomp =15,16
isLowerTriangle ::21,22
isLowerTriangle m22,23
isUpperTriangle ::24,25
isUpperTriangle m25,26
rank ::27,28
rank mat28,29

./tests/matrix.hs,97
module Main where0,1
main ::11,12
main =12,13
prop_matrixRep ::17,18
prop_matrixRep sn18,19

./tests/matrix_flymake.hs,97
module Main where0,1
main ::11,12
main =12,13
prop_matrixRep ::17,18
prop_matrixRep sn18,19

./tests/monomials.hs,142
module Main where1,2
main ::12,13
main =13,14
spec ::15,16
spec =16,17
compQC ::27,28
compQC pol28,29
compSC ::38,39
compSC pol39,40

./tests/multi-table.hs,130
module Main where1,2
main ::12,13
main =13,14
i1 ::15,16
i1 =16,17
spec ::18,19
spec =19,20
prop01 ::23,24
prop01 =24,25

./tests/PolynomialSpec.hs,401
module PolynomialSpec where2,3
asGenListOf ::16,17
asGenListOf =17,18
spec ::19,20
spec =20,21
prop_passesSTest ::23,24
prop_passesSTest sdim24,25
prop_groebnerDivsOrig ::32,33
prop_groebnerDivsOrig sdim33,34
prop_divCorrect ::41,42
prop_divCorrect sdim42,43
prop_indivisible ::51,52
prop_indivisible sdim52,53
prop_degdecay ::61,62
prop_degdecay sdim62,63
rank ::71,72
rank mat72,73

./tests/PolynomialSpec_flymake.hs,401
module PolynomialSpec where2,3
asGenListOf ::16,17
asGenListOf =17,18
spec ::19,20
spec =20,21
prop_passesSTest ::23,24
prop_passesSTest sdim24,25
prop_groebnerDivsOrig ::32,33
prop_groebnerDivsOrig sdim33,34
prop_divCorrect ::41,42
prop_divCorrect sdim42,43
prop_indivisible ::51,52
prop_indivisible sdim52,53
prop_degdecay ::61,62
prop_degdecay sdim62,63
rank ::71,72
rank mat72,73

./tests/QuotientSpec.hs,399
module QuotientSpec where2,3
asGenListOf ::16,17
asGenListOf =17,18
spec ::19,20
spec =20,21
prop_passesSTest ::23,24
prop_passesSTest sdim24,25
prop_groebnerDivsOrig ::32,33
prop_groebnerDivsOrig sdim33,34
prop_divCorrect ::41,42
prop_divCorrect sdim42,43
prop_indivisible ::51,52
prop_indivisible sdim52,53
prop_degdecay ::61,62
prop_degdecay sdim62,63
rank ::71,72
rank mat72,73

./tests/QuotientSpec_flymake.hs,399
module QuotientSpec where2,3
asGenListOf ::16,17
asGenListOf =17,18
spec ::19,20
spec =20,21
prop_passesSTest ::23,24
prop_passesSTest sdim24,25
prop_groebnerDivsOrig ::32,33
prop_groebnerDivsOrig sdim33,34
prop_divCorrect ::41,42
prop_divCorrect sdim42,43
prop_indivisible ::51,52
prop_indivisible sdim52,53
prop_degdecay ::61,62
prop_degdecay sdim62,63
rank ::71,72
rank mat72,73

./tests/Spec.hs,0

./tests/ZeroDimSpec.hs,404
module ZeroDimSpec where2,3
asGenListOf ::21,22
asGenListOf =22,23
spec ::24,25
spec =25,26
{-46,47
-}51,52
prop_univPoly ::70,71
prop_univPoly sdim71,72
rank ::79,80
rank mat80,81
data TestSet =84,85
data TestSet = TestSet {84,85
data TestSet = TestSet { inputMat ::84,85
                       , inputVec ::85,86
                       , answer   ::86,87
linSet ::89,90
linSet =90,91

./tests/ZeroDimSpec_flymake.hs,404
module ZeroDimSpec where2,3
asGenListOf ::21,22
asGenListOf =22,23
spec ::24,25
spec =25,26
{-46,47
-}51,52
prop_univPoly ::70,71
prop_univPoly sdim71,72
rank ::79,80
rank mat80,81
data TestSet =84,85
data TestSet = TestSet {84,85
data TestSet = TestSet { inputMat ::84,85
                       , inputVec ::85,86
                       , answer   ::86,87
linSet ::89,90
linSet =90,91
